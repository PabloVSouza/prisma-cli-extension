name: Release

on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  test:
    name: Test & Validate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript check
        run: npm run tsc

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm run test:ci

      - name: Build project
        run: npm run build

      - name: Security audit
        run: npm audit --audit-level=moderate

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: test
    if: |
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') &&
      github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Verify CI checks passed
        run: |
          echo "Verifying that all CI checks passed before release..."
          echo "This ensures the code has been properly tested and validated"

          # Check if this is a merge commit (indicates PR was merged)
          PARENT_COUNT=$(git rev-list --count --parents HEAD | awk '{print $1}')
          if [ "$PARENT_COUNT" -gt 1 ]; then
            echo "✅ This is a merge commit - PR was successfully merged"
          else
            echo "ℹ️  This is a direct push to main (not a merge)"
          fi

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Generate changelog
        id: changelog
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LATEST_TAG" ]; then
            echo "No previous tags found, generating full changelog"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "Generating changelog since $LATEST_TAG"
            CHANGELOG=$(git log $LATEST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Bump version
        id: version
        run: |
          # Determine version bump type
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BUMP_TYPE="${{ github.event.inputs.release_type }}"
          else
            # Auto-detect based on commit messages
            COMMITS=$(git log --pretty=format:"%s" --no-merges)
            if echo "$COMMITS" | grep -q "BREAKING CHANGE\|!:"; then
              BUMP_TYPE="major"
            elif echo "$COMMITS" | grep -q "feat:"; then
              BUMP_TYPE="minor"
            else
              BUMP_TYPE="patch"
            fi
          fi

          echo "Bump type: $BUMP_TYPE"

          # Bump version
          npm version $BUMP_TYPE --no-git-tag-version

          # Get new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT

      - name: Update changelog
        run: |
          NEW_VERSION="${{ steps.version.outputs.version }}"
          CHANGELOG="${{ steps.changelog.outputs.changelog }}"

          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          # Add new version entry
          {
            echo "## [$NEW_VERSION] - $(date +%Y-%m-%d)"
            echo ""
            echo "$CHANGELOG"
            echo ""
            echo "---"
            echo ""
          } | cat - CHANGELOG.md > temp && mv temp CHANGELOG.md

      - name: Commit changes
        run: |
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore: release v${{ steps.version.outputs.version }}"

      - name: Create tag
        run: |
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"

      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Push changes
        run: |
          git push origin ${{ github.ref_name }}
          git push origin "v${{ steps.version.outputs.version }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body: |
            ## Changes in v${{ steps.version.outputs.version }}

            ${{ steps.changelog.outputs.changelog }}

            ## Installation

            ```bash
            npm install prisma-cli-extension@${{ steps.version.outputs.version }}
            ```
          draft: false
          prerelease: false
