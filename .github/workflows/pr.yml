name: Pull Request

on:
  pull_request:
    branches: [main, master, staging]

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript check
        run: npm run tsc

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm run test:ci

      - name: Build project
        run: npm run build

      - name: Comment PR with test results
        if: matrix.node-version == '20.x'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read test results if available
            let testResults = '';
            try {
              const coveragePath = path.join(process.cwd(), 'coverage', 'lcov-report', 'index.html');
              if (fs.existsSync(coveragePath)) {
                testResults = 'âœ… Tests passed with coverage report available';
              } else {
                testResults = 'âœ… Tests passed';
              }
            } catch (error) {
              testResults = 'âœ… Tests passed';
            }

            // Create comment
            const comment = `## ðŸ§ª Test Results

            **Node.js ${{ matrix.node-version }}**
            - ${testResults}
            - âœ… TypeScript check passed
            - âœ… Linting passed
            - âœ… Build successful

            ---

            *This comment was automatically generated by the CI workflow.*`;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ðŸ§ª Test Results')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
